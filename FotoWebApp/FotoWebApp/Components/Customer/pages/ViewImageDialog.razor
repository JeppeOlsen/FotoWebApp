@using MudBlazor
@using FotoWebApp.Data.Models
@using FotoWebApp.Data

<MudDialog Style="height: 90%">
    <DialogContent>
        <MudCarousel Class="mud-width-full" @ref="_carousel" ItemsSource="@Album.Images" Style="height:100%;" ShowArrows="@_arrows" ShowBullets="@_bullets" EnableSwipeGesture="@_enableSwipeGesture" AutoCycle="@_autocycle" SelectedIndexChanged="() => HandleCarouselToggle()">
            <ItemTemplate>
                <div class="d-flex flex-column justify-center" style="height: 100%; width: auto; display: flex; justify-content: center; align-items: center;">
                    <div style="position: relative; max-width: 100%; max-height: 100%; width: auto; height: auto;">
                        <MudImage Src="@context.PhotoUrl" ObjectFit="ObjectFit.None" Elevation="0" Style="max-width: 100%; max-height: 100%; width: auto; height: auto;" />
                        <MudOverlay Visible="@(context.Selected)" DarkBackground="true" Absolute="true" style="bottom: 6px">
                            <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.Check" Color="Color.Tertiary" />
                        </MudOverlay>
                    </div>
                </div>
            </ItemTemplate>
            <BulletTemplate Context="selected">
                <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
                    <span class="mud-icon-button-label">
                        <MudIcon Icon="@(selected && _toggled ? Icons.Material.Filled.CheckCircle : (selected ? Icons.Material.Filled.Circle : Icons.Material.Filled.RadioButtonUnchecked))" Color="@(selected && _toggled ? Color.Tertiary : Color.Inherit)" />
                    </span>
                </div>
            </BulletTemplate>
        </MudCarousel>
    </DialogContent>
    <DialogActions>
        @if (_carouselReady)
        {
            <MudToggleIconButton @bind-Toggled="@(_toggled)"
                                 Icon="@Icons.Material.Filled.RadioButtonUnchecked"
                                 Color="@Color.Tertiary"
                                 ToggledIcon="@Icons.Material.Filled.CheckCircle"
                                 ToggledColor="@Color.Tertiary"
                                 @onclick="() => {
                                    ToggleImageSelection(Album.Images.ToList()[_carousel.SelectedIndex].ImageId);
                                    HandleCarouselToggle();
                                }" />
            <MudSpacer />
            <MudText>@(_toggled ? "Approved" : "Not Approved")</MudText>
        }
        else
        {
            <div>Loading buttons...</div>
        }
    </DialogActions>
</MudDialog>

@code {

    private MudCarousel<Image>? _carousel;
    private bool _arrows = true;
    private bool _bullets = true;
    private bool _enableSwipeGesture = true;
    private bool _autocycle = false;

    private bool _toggled { get; set; }
    private string _imageName { get; set; }
    private int selectedIndex { get; set; }

    private bool _carouselReady = false;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;

    [Parameter]
    public Album? Album { get; set; }

    [Parameter]
    public Action<int> ToggleImageSelection { get; set; }

    [Parameter]
    public int imageId { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            if (_carousel != null)
            {
                _carouselReady = true;
                StateHasChanged(); // Trigger UI update
            }

            // Get the index of the clicked image in the album's image list from Filename
            selectedIndex = Album.Images.ToList().FindIndex(img => img.ImageId == imageId);

            // Move the carousel to the index
            _carousel.MoveTo(selectedIndex);
        }

    }

    private void HandleCarouselToggle()
    {
        // Get the image at the current index
        var image = Album.Images.ToList()[_carousel.SelectedIndex].Selected;

        _toggled = image;

        // Refresh the UI
        StateHasChanged();
    }


}
