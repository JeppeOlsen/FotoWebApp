@using Microsoft.EntityFrameworkCore
@using FotoWebApp.Data.Models
@using FotoWebApp.Data
@inject ApplicationDbContext dbContext

<MudDialog>
    <DialogContent>
        <EditForm Model="@newAlbum" OnValidSubmit="CreateAlbum">
            <DataAnnotationsValidator /> @* Helper component to validate based on dataannotations on a model class *@
            <MudCard>
                <MudCardContent>
                    <MudTextField Class="mb-6"
                    @bind-Value="newAlbum.Name" For="@(() => newAlbum.Name)" />
                    <MudTextField Class="mb-3"
                    @bind-Value="newCustomer.Name" For="@(() => newCustomer.Name)" />
                    <MudTextField Class="mb-3"
                    @bind-Value="newCustomer.Email" For="@(() => newCustomer.Email)" />
                    <MudTextField Class="mb-6"
                    @bind-Value="newCustomer.Phone" For="@(() => newCustomer.Phone)" />
                    <MudNumericField Class="mb-6" Variant="Variant.Text"
                    @bind-Value="newAlbum.MaxSelectedImages" For="@(() => newAlbum.MaxSelectedImages)" />
					<MudDatePicker Label="Customer Deadline"
                    DateFormat="dd.MM.yyyy" ShowWeekNumbers="true"
                    Editable="true" Placeholder="Select Date (day.month.year)"
                    @bind-Date="newAlbum.Deadline" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" Class="ml-auto">Opret nyt projekt</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </DialogContent>
    <DialogActions>

    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public int PhotographerId { get; set; }

    public Album? newAlbum = new Album();

    public Customer? newCustomer = new Customer();

    // // Mock id for now. We should get the id from the logged in user / photographer
    // public int photoGrapherId = 1;

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private async Task CreateAlbum(EditContext editContext)
    {
        try
        {
            // Validating form
            editContext.Validate();

            // Set the PhotographerId
            newAlbum.PhotographerId = PhotographerId;

            // Set the password for the album
            newAlbum.LinkPassword = Guid.NewGuid().ToString(); // TODO: Generate a random password or let the user set it, or let it be null (effectively making it non-accessible to the public).
                                                               // for now we generate a random password using Guid.NewGuid(). This is not totally secure, but it is a simple way to generate a random string.
                                                               // TODO: password generation logic should be moved to a service or a helper class, and should be more secure.

            newAlbum.Customer = newCustomer;

            dbContext.Albums.Add(newAlbum);
            await dbContext.SaveChangesAsync();

            // resets form after succesful submit
            newAlbum = new Album();
            newCustomer = new Customer();

            // Close the modal with success. Used in Albums.razor to update the state
            Submit();
        }
        catch(DbUpdateException)
        {
            throw;
        }


    }
}

