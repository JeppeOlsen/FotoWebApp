@page "/Albums"
@using Microsoft.EntityFrameworkCore
@using FotoWebApp.Models
@using FotoWebApp.Data
@inject ApplicationDbContext MyDbContext
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Projects</PageTitle>

@* mudblazor providers for dialogs and snacbars *@
<MudDialogProvider />
<MudPopoverProvider />
<MudSnackbarProvider />


@if (albums == null)
{

    @* Skeleton render *@ 
    <MudGrid Spacing="6" Class="pa-4" style="padding-top: 80px !important;">

        @for (int i = 0; i < loadingBoxes; i++)
        {
            <MudItem Style="min-width: 255px">
                <MudCard>
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
                    <MudCardContent>
                        <MudSkeleton Width="30%" Height="42px;" />
                        <MudSkeleton Width="80%" />
                        <MudSkeleton Width="100%" />
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>

}
else
{
    @* Tool Bar *@
    <MudItem xs="12" Class="pt-0 sticky" Style="top: 64px">
        <MudPaper>
            <MudToolBar Class="justify-start">
                <MudTooltip Text="Add Project">
                    <MudIconButton Icon="@Icons.Material.Filled.CreateNewFolder" @onclick="OpenDialogAsync" Color="Color.Tertiary" />
                </MudTooltip>
            </MudToolBar>
        </MudPaper>
    </MudItem>

    @* Ablums Grid *@
    <MudGrid Spacing="6" Class="pa-4">
        @foreach (var album in albums)
        {
            <MudItem Style="min-width: 255px">
                <MudLink Href="@($"albums/{album.AlbumId}")" Underline="Underline.None">
                    <MudCard>
                        <MudCardMedia Image="https://picsum.photos/500" Height="200" Style="border-radius: 4px" />
                        <MudCardContent>
                            <MudText Typo="Typo.h5">@album.Name</MudText>
                            <MudText Typo="Typo.body2">@album.Customer.Name</MudText>
                            <MudText Typo="Typo.body2">@album.Deadline</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudLink>
            </MudItem>
        }
    </MudGrid>
}


@code {
    private List<Album>? albums;

    private int loadingBoxes = 30;

    // Get album data with customer from DB
    protected override async Task OnInitializedAsync()
    {
        // await Task.Delay(500); // Only for demo view
        await GetAlbums();
    }

    private async Task GetAlbums()
    {
        try
        {
            albums = await MyDbContext.Albums
            .Include(x => x.Customer)
            .ToListAsync();
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    private void SuccesSnackbar()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomEnd;
        Snackbar.Add("Project Created", Severity.Success, config => { config.VisibleStateDuration = 5000; });
    }

    private async Task OpenDialogAsync()
    {

        var options = new DialogOptions {CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true};

        var dialog = await DialogService.ShowAsync<AlbumsAddProjectModal>("Create Project", options);

        var result = await dialog.Result;

        // Capture the result of the modal from AlbumsAddProhectModal and update the state, and show snacbar
        if(!result.Canceled)
        {
            SuccesSnackbar();
            await GetAlbums();
            StateHasChanged();
        }

    }

}
