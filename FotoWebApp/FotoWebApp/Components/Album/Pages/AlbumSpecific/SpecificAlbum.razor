@page "/albums/{AlbumId:int}"
@using Microsoft.AspNetCore.Authorization @* For Authorization *@
@using Microsoft.EntityFrameworkCore
@using FotoWebApp.Data.Models
@using FotoWebApp.Data
@using Azure.Storage.Blobs
@using Azure.Storage.Blobs.Models
@using System.Web
@rendermode InteractiveServer
@inject ISnackbar Snackbar
@inject BlobServiceClient blobService
@inject ApplicationDbContext dbContext // Inject the DbContext to interact with the database
@inject NavigationManager NavigationManager // Inject the NavigationManager to navigate between pages
@inject IDialogService DialogService
@attribute [Authorize]
@* @inject IDbContextFactory<FotoWebApp.Data.ApplicationDbContext> DbFactory // Inject the IDbContextFactory to create a new instance of the DbContext when needed (Scoped). This is recommended because the DbContext is not thread-safe.
@inject NavigationManager NavigationManager // Inject the NavigationManager to navigate between pages  *@


<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<PageTitle>Specific Project</PageTitle>
@if (Album == null) // If the Album is null
{
    @* <p><em>Loading...</em></p> // Display a loading message *@
    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
}
else
{

    @* Sticky Toolbar? *@
    <MudItem xs="12" Class="pt-0 sticky z-10" Style="top: 64px">
        <MudPaper>
            <MudToolBar Class="justify-end">
                @* Upload Button *@
                <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFiles" MaximumFileCount="100" AppendMultipleFiles="true" Accept=".png, .jpg, .gif, .tiff, .tif, .heif, .heic, .bmp">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Filled"
                        Color="Color.Primary"
                        EndIcon="@Icons.Material.Filled.CloudUpload"
                        Class="mr-2">
                            Upload Images
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>
                @* Share Project Button *@
                <MudButton Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.IosShare" OnClick="ShowShareProjectDialogAsync" Class="mr-2">Share Project</MudButton>
                @* List of selected image filenames button *@
                <MudButton Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.List" OnClick="ShowSelectedImageFileNamesDialogAsync">Selected Images List</MudButton>
                @* Spacer *@
                <MudSpacer />
                @* Delete Button *@
                <MudTooltip Text="Delete Project">
                    <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" OnClick="ShowDeleteConfirmation" Color="Color.Error" />
                </MudTooltip>
            </MudToolBar>
        </MudPaper>
    </MudItem>

    <MudGrid Class="pa-4">

        <InputFile class="@_dragClass"
        style="@_dragStyle"
        @ondragenter="SetDragClass"
        @ondragleave="ClearDragClass" 
        multiple
        disabled="@_isDisabled"
        OnChange="@HandleDrop" />

        @* Album Info Area *@
        <MudItem xs="12" sm="4">
            <EditForm Model="@Album" OnValidSubmit="UpdateAlbum">
                <DataAnnotationsValidator /> @* Helper component to validate based on dataannotations on a model class *@
                <MudGrid>
                    <MudItem xs="12">
                        <MudCard>
                            <MudCardContent >
                                @* Album Name *@
                                <MudTextField Class="mb-6"
                                @bind-Value="Album.Name" For="@(() => Album.Name)" />
                                @* Customer Info *@
                                <MudTextField Class="mb-3"
                                @bind-Value="Album.Customer.Name" For="@(() => Album.Customer.Name)" />
                                <MudTextField Class="mb-3"
                                @bind-Value="Album.Customer.Email" For="@(() => Album.Customer.Email)" />
                                <MudTextField Class="mb-6"
                                @bind-Value="Album.Customer.Phone" For="@(() => Album.Customer.Phone)" />
                                @* Max Selected Images *@
                                <MudNumericField Class="mb-6" Variant="Variant.Text"
                                @bind-Value="Album.MaxSelectedImages" For="@(() => Album.MaxSelectedImages)" />
                                @* Deadline *@
                                <MudDatePicker Label="Deadline" 
                                DateFormat="dd.MM.yyyy" ShowWeekNumbers="true"
                                Editable="true" Placeholder="Select Date"
                                @bind-Date="Album.Deadline" />
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudItem>

        @* Statistics Area *@
        <MudItem xs="12" sm="8">
            <MudPaper Class="d-flex align-center justify-center mud-width-full mud-height-full py-8">
                <MudChart ChartOptions="@DeadlineBarOptions" ChartType="ChartType.Donut" Width="300px" Height="300px" InputData="@DeadlineData" InputLabels="@DeadlineLabels">
                    <CustomGraphics>
                        @if (DaysLeft == 0)
                        {
                            <svg>
                                <text class="donut-inner-text" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="white" font-family="Helvetica" font-size="2">Deadline reached</text>
                            </svg>
                        }
                        else
                        {
                            <svg>
                                <text class="donut-inner-text" x="50%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="white" font-family="Helvetica" font-size="2">Days to deadline</text>
                                <text class="donut-inner-text" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="white" font-family="Helvetica" font-size="5">@DaysLeft</text>
                            </svg>
                        }
                    </CustomGraphics>
                </MudChart>
                <MudChart ChartOptions="@SelectedImagesBarOptions" ChartType="ChartType.Donut" Width="300px" Height="300px" InputData="@SelectedImagesData" InputLabels="@SelectedImagesLabels">
                    <CustomGraphics>
                        <text class="donut-inner-text" x="50%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="white" font-family="Helvetica" font-size="2">Total</text>
                        <text class="donut-inner-text" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="white" font-family="Helvetica" font-size="5">@SelectedImagesCount / @Album.MaxSelectedImages</text>
                    </CustomGraphics>
                </MudChart>
            </MudPaper>
        </MudItem>

        @* Upload Progress Area (hidden when not uploading) *@
        <MudItem xs="12">
            @if (isUploading) {
                <MudProgressLinear Color="Color.Success" Size="Size.Large" Rounded="true" Striped="true" Value="@uploadedFiles" Class="my-6">
                    <MudText Typo="Typo.subtitle1">
                        <b>@uploadedFiles of @totalFiles</b>
                    </MudText>
                </MudProgressLinear>
            }
        </MudItem>

        @* Photos Area *@
        <MudItem xs="12">
            <MudGrid Justify="Justify.FlexStart">
                @if (Album?.Images == null || Album.Images.Count == 0)
                {
                    <MudItem xs="12">
                        <MudPaper>
                            <MudText Typo="Typo.h6">No images uploaded yet</MudText>
                        </MudPaper>
                    </MudItem>
                }
                else
                {
                    <MudItem Style="width: 100%">
                        @* Photos Area TAB 1 Uploaded images*@
                        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                            <MudTabPanel Text="Uploaded images">
                                <MudTable Items="@Album.Images" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
                                    <HeaderContent>
                                        <MudTh>Image</MudTh>
                                        <MudTh>Filename</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Image"><MudImage Style="cursor: zoom-in" @onclick="() => OpenImageDialogAsync(context.PhotoUrl, context.FileName)" ObjectFit="ObjectFit.Cover" Src="@context.PhotoUrl" Elevation="25" Class="rounded-lg" Width="50" Height="50" /></MudTd>
                                        <MudTd DataLabel="Filename">@context.FileName</MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudTabPanel>
                            @* Photos Area TAB 1 Customer selected images*@
                            <MudTabPanel Text="Selected Images">
                                <MudTable Items="@Album.Images" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
                                    <HeaderContent>
                                        <MudTh>Image</MudTh>
                                        <MudTh>Filename</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        @if(context.Selected)
                                        {
                                            <MudTd DataLabel="Image"><MudImage Style="cursor: zoom-in" @onclick="() => OpenImageDialogAsync(context.PhotoUrl, context.FileName)" ObjectFit="ObjectFit.Cover" Src="@context.PhotoUrl" Elevation="25" Class="rounded-lg" Width="50" Height="50" /></MudTd>
                                            <MudTd DataLabel="Filename">@context.FileName</MudTd>
                                        }
                                    </RowTemplate>
                                </MudTable>
                            </MudTabPanel>
                        </MudTabs>
                    </MudItem>
                }   
            </MudGrid>
        </MudItem>
    </MudGrid>
}

@code {
    #region Show Selected Image File Names Dialog
    private async Task ShowSelectedImageFileNamesDialogAsync()
    {
        var parameters = new DialogParameters
        {
            { "Images", Album!.Images }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        await DialogService.ShowAsync<FileNamesListDialog>("Selected Image FileNames", parameters, options);
    }
    #endregion

    #region Share Project Dialog
    private async Task ShowShareProjectDialogAsync()
    {
        var parameters = new DialogParameters
        {
            { "FullUri", $"{NavigationManager.BaseUri}ChooseImages/{Album!.AlbumId}?Password={Album.LinkPassword}" }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        await DialogService.ShowAsync<ShareProjectDialog>("Share Project", parameters, options);
    }
    #endregion


    #region Enlarge Photo logic



    private async Task OpenImageDialogAsync(string photourl)
    {
        var options = new DialogOptions { BackgroundClass = "blurry-class", CloseButton = true };
        var parameters = new DialogParameters { ["PhotoUrl"] = photourl };

        await DialogService.ShowAsync<ViewImageDialog>("View Photo", parameters, options);
    }

    # endregion



    [Parameter] // Supply the AlbumId from the query string
    public int AlbumId { get; set; }

    [SupplyParameterFromForm] // Supply the Album from the form
    public Album? Album { get; set; }

    private string containerName; // Declare without initializing
    private const int maxAllowedSize = 10 * 1024 * 1024; // 10 MB. TODO: Get from settings
    private const string baseUri = "https://stfotowebappeu001.blob.core.windows.net"; // TODO: Get from settings

    #region OnInitialized
    // This method is called when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        // Create a new instance of the DbContext
        // using var dbContext = DbFactory.CreateDbContext(); 

        // Get the Album from the database based on the AlbumId or null if it does not exist
        Album ??= await dbContext.Albums
            .Include(Album => Album.Customer) // Include the Customer navigation property
            .Include(Album => Album.Photographer) // Include the Photographer navigation property
            .Include(Album => Album.Images) // Include the Images navigation property (should probably be lazily loaded later on)
            .FirstOrDefaultAsync(Album => Album.AlbumId == AlbumId);

        // If the Album does not exist, navigate to the notfound page
        if (Album is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        containerName = $"album{Album!.AlbumId}"; // Set the container name based on the AlbumId
    }    
    #endregion

    #region Album Info
    private async Task UpdateAlbum(EditContext editContext)
    {
        if (!editContext.Validate()) // Validate the form
        {
            Snackbar.Add("Please correct the errors in the form.", Severity.Error);
            return;
        }

        // using var dbContext = DbFactory.CreateDbContext();
        dbContext.Attach(Album!).State = EntityState.Modified; // Attach the Album to the DbContext and set the state to modified

        try
        {
            await dbContext.SaveChangesAsync(); // Save the changes to the database

            Snackbar.Add("Album updated successfully.", Severity.Success);
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!AlbumExists(Album!.AlbumId)) // Check if the Album exists
            {
                NavigationManager.NavigateTo("error"); // Navigate to the error page if the Album does not exist"
            } 
            else
            {
                throw;
            }
        }

        StateHasChanged(); // Refresh the UI (not enough to hit the db again...)
    }

    private bool AlbumExists(int albumId)
    {
        // using var dbContext = DbFactory.CreateDbContext();
        return dbContext.Albums.Any(e => e.AlbumId == albumId); // Check if an Album with the given AlbumId exists
    }
    #endregion

    #region Delete Project
    private async Task ShowDeleteConfirmation()
    {
        var parameters = new DialogParameters
        {
            { "Message", "Are you sure you want to delete this project?" }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = DialogService.Show<ConfirmDialog>("Confirm Deletion", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteAlbum();
        }
    }

    private async Task DeleteAlbum()
    {
        if (Album != null)
        {
            dbContext.Albums.Remove(Album);
            await dbContext.SaveChangesAsync();
            NavigationManager.NavigateTo("/albums"); // Redirect after deletion
        }
    }
    #endregion

    #region Upload Images
    private bool isUploading = false;
    int totalFiles = 100; // default value
    int uploadedFiles = 0;

    private async Task UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        totalFiles = files.Count; // Set the total files count
        isUploading = true; // Set the isUploading flag to true

        var containerClient = blobService.GetBlobContainerClient(containerName); // Get the BlobContainerClient
        await containerClient.CreateIfNotExistsAsync(PublicAccessType.Blob); // Create the container if it does not exist

        foreach (var file in files)
        {
            string fileName = file.Name;
            var result = await containerClient.UploadBlobAsync(fileName, file.OpenReadStream(maxAllowedSize: maxAllowedSize));

            // Encode the filename to make it URI-safe
            string encodedFileName = HttpUtility.UrlEncode(fileName)
            .Replace("+", "%20")  // Replace spaces
            .Replace("(", "%28") // Replace '('
            .Replace(")", "%29"); // Replace ')'
            System.Diagnostics.Debug.WriteLine($"Encoded filename: '{fileName}' to '{encodedFileName}'");

            // Combine the base URI with the encoded filename
            string fileUri = $"{baseUri}/{containerName}/{encodedFileName}";
            System.Diagnostics.Debug.WriteLine($"File URI: '{fileUri}'");

            // Save the image to the database
            Album.Images.Add(new Image { PhotoUrl = fileUri, FileName = fileName });

            // Update the upload progress
            uploadedFiles++;

            // Refresh the UI
            StateHasChanged();
        }

        // Save the changes to the database
        dbContext.Attach(Album!).State = EntityState.Modified; // Attach the Album to the DbContext and set the state to modified

        try
        {
            await dbContext.SaveChangesAsync(); // Save the changes to the database
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!AlbumExists(Album!.AlbumId)) // Check if the Album exists
            {
                NavigationManager.NavigateTo("error"); // Navigate to the error page if the Album does not exist"
            }
            else
            {
                throw;
            }
        }

        // Reset the progress indicator variables
        isUploading = false; // Hide the progress indicator
        uploadedFiles = 0;
        totalFiles = 100;

        // Refresh the UI
        StateHasChanged();
    }
    #endregion

    #region Options and logic for bar charts
    // Options and logic for Images chart
    public int SelectedImagesCount => Album?.Images.Count(i => i.Selected) ?? 0; // Count the number of selected images
    public double[] SelectedImagesData => new[] { (double)SelectedImagesCount, (double)(Album?.MaxSelectedImages ?? 0) - SelectedImagesCount }; // Create the data array for the chart
    public string[] SelectedImagesLabels = { "Selected Images", "Unselected Images" }; // Create the labels array for the chart
    public ChartOptions SelectedImagesBarOptions = new ChartOptions() { ChartPalette = new[] { "#1ec8a4", "#ff4181" } }; // Create the ChartOptions for the chart

    // Options and logic for Deadline chart
    public double DaysLeft => Album?.Deadline.HasValue == true ? Math.Max(0, Math.Ceiling((Album.Deadline.Value - DateTime.Now).TotalDays)) : 1; // Calculate the number of days left until the deadline
    public double[] DeadlineData => new[] { DaysLeft }; // Create the data array for the chart
    public string[] DeadlineLabels // Create the labels array for the chart
    {
        get
        {
            if (DaysLeft == 0)
            {
                return new[] { "Deadline" };
            }
            else
            {
                return new[] { "Days Left", "Deadline" };
            }
        }
    }
    public ChartOptions DeadlineBarOptions
    {
        get
        {
            if (DaysLeft == 0)
            {
                // Modify the ChartOptions when daysLeft is 0
                return new ChartOptions()
                    {
                        ChartPalette = new[] { "#ff4181" }
                    };
            }
            else
            {
                // Default ChartOptions
                return new ChartOptions()
                    {
                        ChartPalette = new[] { "#1ec8a4" }
                    };
            }
        }
    }
    #endregion

    #region Logic for drag and drop

    private IReadOnlyList<IBrowserFile> droppedFiles;
    private bool _isDisabled = true;
    private const string DefaultDragClass = "absolute";
    private const string DefaultDragStyle = "height: 100vh; width: 100%; left: 0px; top: 0px;";
    private string _dragClass = DefaultDragClass;
    private string _dragStyle = DefaultDragStyle;

    private void SetDragClass()
    {
        _dragClass = $"{DefaultDragClass} border-2 border-dashed mud-border-primary";
        _dragStyle = $"{DefaultDragStyle} z-index: 1400; background-color: black; opacity: 0.5";
        _isDisabled = false;
    }

    private void ClearDragClass()
    {
        _dragClass = DefaultDragClass;
        _dragStyle = DefaultDragStyle;
        _isDisabled = true;
    }

    private async Task HandleDrop(InputFileChangeEventArgs e)
    {
        try
        {

            droppedFiles = e.GetMultipleFiles();

            ClearDragClass();

            await UploadFiles(droppedFiles);

        }
        catch(Exception error)
        {
            throw error;
        }

    }
    #endregion

    #region Enlarge Photo logic

    private async Task OpenImageDialogAsync(string photourl, string photoName)
    {
        var options = new DialogOptions { CloseButton = true };
        var parameters = new DialogParameters { ["PhotoUrl"] = photourl };

        await DialogService.ShowAsync<ViewImageDialog>(photoName, parameters, options);
    }

    #endregion

    #region Table data
    private bool _loading;
    #endregion
}
