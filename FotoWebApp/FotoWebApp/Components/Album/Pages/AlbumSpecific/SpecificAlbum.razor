@page "/SpecificAlbum"
@using Microsoft.EntityFrameworkCore
@using FotoWebApp.Models
@using FotoWebApp.Data
@rendermode InteractiveServer
@inject ApplicationDbContext dbContext // Inject the DbContext to interact with the database
@inject NavigationManager NavigationManager // Inject the NavigationManager to navigate between pages
@inject IDialogService DialogService
@* @inject IDbContextFactory<FotoWebApp.Data.ApplicationDbContext> DbFactory // Inject the IDbContextFactory to create a new instance of the DbContext when needed (Scoped). This is recommended because the DbContext is not thread-safe.
@inject NavigationManager NavigationManager // Inject the NavigationManager to navigate between pages  *@


<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<PageTitle>Specific Album</PageTitle>
@if (Album == null) // If the Album is null
{
    <p><em>Loading...</em></p> // Display a loading message
}
else
{

    @* <MudPaper style="position: fixed; width: 100%; background-color: rgba(39, 39, 47, 1);
        z-index: 9999; padding: 13px; border-top: 1px solid rgb(23, 23, 28);">
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="ShowDeleteConfirmation">
            Delete Project
        </MudButton>
    </MudPaper> *@

    <MudGrid Class="mt-0 pa-4">

    @* Sticky Toolbar? *@

        <MudItem xs="12" Class="pt-0">
            <MudPaper>
                <MudToolBar Class="justify-end">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="ShowDeleteConfirmation" />
                </MudToolBar>
            </MudPaper>

        </MudItem>
       

    @* Album Info Area *@
    <MudItem xs="12" sm="4">
        <EditForm Model="@Album" OnValidSubmit="UpdateAlbum">
            <DataAnnotationsValidator /> @* Helper component to validate based on dataannotations on a model class *@
            <MudGrid>
                <MudItem xs="12">
                    <MudCard>
                        <MudCardContent>
                            @* Album Name *@
                            <MudTextField Label="Album Name" Class="mb-6"
                                          @bind-Value="Album.Name" For="@(() => Album.Name)" />
                            @* Customer Info *@
                            <MudTextField Label="Customer Name" Class="mb-3"
                                          @bind-Value="Album.Customer.Name" For="@(() => Album.Customer.Name)" />
                            <MudTextField Label="Customer Email" Class="mb-3"
                                          @bind-Value="Album.Customer.Email" For="@(() => Album.Customer.Email)" />
                            <MudTextField Label="Customer Phone" Class="mb-6"
                                          @bind-Value="Album.Customer.Phone" For="@(() => Album.Customer.Phone)" />
                            @* Deadline *@
                            <MudDatePicker Label="Deadline" 
                                DateFormat="dd.MM.yyyy" ShowWeekNumbers="true"
                                Editable="true" Placeholder="Vælg dato"
                                @bind-Date="Album.Deadline" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudItem>

    @* Upload Area *@
    <MudItem xs="12" sm="8">
        <MudPaper Class="d-flex align-center justify-center mud-width-full mud-height-full py-8">
            xs=12 sm=8
        </MudPaper>
    </MudItem>

    @* Photos Area *@ @* TODO: Skal laves cool *@
    <MudItem xs="12">
        <MudGrid Justify="Justify.FlexStart">
            @for (int i = 0; i < ImagesCount; i++)
            {
            <MudItem xs="12" sm="12" md="6" lg="6" xl="4" xxl="2" Style="">
                <MudPaper>
                        <MudImage Class="rounded-lg" Src=@GetRandomImgSrc() Style="display: block; height: 210px; max-width: auto; margin-left: auto; margin-right: auto;"/>
                </MudPaper>
            </MudItem>
            }
        </MudGrid>
    </MudItem>
    </MudGrid>
}

@code {

    [SupplyParameterFromQuery] // Supply the AlbumId from the query string
    public int AlbumId { get; set; }

    [SupplyParameterFromForm] // Supply the Album from the form
    public Album? Album { get; set; }

    // This method is called when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        // Create a new instance of the DbContext
        // using var dbContext = DbFactory.CreateDbContext(); 

        // Get the Album from the database based on the AlbumId or null if it does not exist
        Album ??= await dbContext.Albums
            .Include(Album => Album.Customer) // Include the Customer navigation property
            .Include(Album => Album.Photographer) // Include the Photographer navigation property
            .Include(Album => Album.Images) // Include the Images navigation property (should probably be lazily loaded later on)
            .FirstOrDefaultAsync(Album => Album.AlbumId == AlbumId); 

        // If the Album does not exist, navigate to the notfound page
        if (Album is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }    

    #region Album Info

    private async Task UpdateAlbum(EditContext editContext)
    {
        editContext.Validate(); // Validate the form

        // using var dbContext = DbFactory.CreateDbContext();
        dbContext.Attach(Album!).State = EntityState.Modified; // Attach the Album to the DbContext and set the state to modified

        try
        {
            await dbContext.SaveChangesAsync(); // Save the changes to the database
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!AlbumExists(Album!.AlbumId)) // Check if the Album exists
            {
                NavigationManager.NavigateTo("error"); // Navigate to the error page if the Album does not exist"
            } 
            else
            {
                throw;
            }
        }

        StateHasChanged(); // Refresh the UI
    }

    private bool AlbumExists(int albumId)
    {
        // using var dbContext = DbFactory.CreateDbContext();
        return dbContext.Albums.Any(e => e.AlbumId == albumId); // Check if an Album with the given AlbumId exists
    }
    #endregion

    #region Photos Area
    int ImagesCount = 10;
    

    private Dictionary<int, string> SampleImages = new Dictionary<int, string>()
    {
        {1, "https://jule-tøj.dk/wp-content/uploads/2024/11/Jule-Sweaters-Bluse-Rudolfs-Roed.jpg"},
        {2, "https://jule-tøj.dk/wp-content/uploads/2024/11/Jule-Sweaters-Bluse-Cute-Graa.jpg"},
        {3, "https://julesweater-dame.dk/wp-content/uploads/2022/06/Jule-Sweaters-Bluse-Scoodoolf-Moerkegroen-3-4-aar-98-104-Jule-Sweater-Bluse.jpg"},
        {4, "https://minijacobi.dk/cdn/shop/products/9604-AlmaKidsLsTopX-Mas20Green.jpg?v=1606226125&width=533"},
        {5, "https://img.pikbest.com/ai/illus_our/20230422/cc5a7c6b641f962c662171f0c2ea6d3b.jpg!sw800"},
        {6, "https://img.freepik.com/premium-photo/beautiful-outdoor-christmas-scene-illustration-christmas-house-with-snow-winter-landscape-village_932772-773.jpg"}
    };

    private string GetRandomImgSrc()
    {
        Random random = new Random();
        int randomIndex = random.Next(1, SampleImages.Count);
        return SampleImages[randomIndex];
    }
    #endregion

    #region Delete Project
    private async Task ShowDeleteConfirmation()
    {
        var parameters = new DialogParameters
        {
            { "Message", "Are you sure you want to delete this project?" }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = DialogService.Show<ConfirmDialog>("Confirm Deletion", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteAlbum();
        }
    }

    private async Task DeleteAlbum()
    {
        if (Album != null)
        {
            dbContext.Albums.Remove(Album);
            await dbContext.SaveChangesAsync();
            NavigationManager.NavigateTo("/albums"); // Redirect after deletion
        }
    }
    #endregion
}
