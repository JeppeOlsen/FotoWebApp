@page "/albums/{AlbumId:int}"
@using Microsoft.EntityFrameworkCore
@using FotoWebApp.Models
@using FotoWebApp.Data
@using Azure.Storage.Blobs
@using Azure.Storage.Blobs.Models
@using System.Web
@rendermode InteractiveServer
@inject BlobServiceClient blobService
@inject ApplicationDbContext dbContext // Inject the DbContext to interact with the database
@inject NavigationManager NavigationManager // Inject the NavigationManager to navigate between pages
@inject IDialogService DialogService
@* @inject IDbContextFactory<FotoWebApp.Data.ApplicationDbContext> DbFactory // Inject the IDbContextFactory to create a new instance of the DbContext when needed (Scoped). This is recommended because the DbContext is not thread-safe.
@inject NavigationManager NavigationManager // Inject the NavigationManager to navigate between pages  *@


<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<PageTitle>Specific Project</PageTitle>
@if (Album == null) // If the Album is null
{
    @* <p><em>Loading...</em></p> // Display a loading message *@
    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
}
else
{

        @* Sticky Toolbar? *@
        <MudItem xs="12" Class="pt-0 relative z-10">
            <MudPaper>
                <MudToolBar Class="justify-end">
                    @* Upload Button *@
                    <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFiles" MaximumFileCount="100" AppendMultipleFiles="true" Accept=".png, .jpg, .gif, .tiff, .tif, .heif, .heic, .bmp">
                        <ActivatorContent>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload">
                                Upload Files
                            </MudButton>
                        </ActivatorContent>
                    </MudFileUpload>
                    @* Spacer *@
                    <MudSpacer />
                    @* Delete Button *@
                    <MudTooltip Text="Delete Project">
                        <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" OnClick="ShowDeleteConfirmation" Color="Color.Error" />
                    </MudTooltip>
                </MudToolBar>
            </MudPaper>
        </MudItem>

        <MudGrid Class="pa-4">
        <div class="@_dragClass"
             style="@_dragStyle"
             @ondragenter="SetDragClass"
             @ondragleave="ClearDragClass"
             @ondrop="HandleDrop">
        </div>
        @* Album Info Area *@
        <MudItem xs="12" sm="4">
            <EditForm Model="@Album" OnValidSubmit="UpdateAlbum">
                <DataAnnotationsValidator /> @* Helper component to validate based on dataannotations on a model class *@
                <MudGrid>
                    <MudItem xs="12">
                        <MudCard>
                            <MudCardContent>
                                @* Album Name *@
                                <MudTextField Label="Project Name" Class="mb-6"
                                              @bind-Value="Album.Name" For="@(() => Album.Name)" />
                                @* Customer Info *@
                                <MudTextField Label="Customer Name" Class="mb-3"
                                              @bind-Value="Album.Customer.Name" For="@(() => Album.Customer.Name)" />
                                <MudTextField Label="Customer Email" Class="mb-3"
                                              @bind-Value="Album.Customer.Email" For="@(() => Album.Customer.Email)" />
                                <MudTextField Label="Customer Phone" Class="mb-6"
                                              @bind-Value="Album.Customer.Phone" For="@(() => Album.Customer.Phone)" />
                                @* Max Selected Images *@
                                <MudNumericField Label="Max Number Of Images" Class="mb-6" Variant="Variant.Text"
                                              @bind-Value="Album.MaxSelectedImages" For="@(() => Album.MaxSelectedImages)" />
                                @* Deadline *@
                                <MudDatePicker Label="Deadline" 
                                    DateFormat="dd.MM.yyyy" ShowWeekNumbers="true"
                                    Editable="true" Placeholder="Vælg dato"
                                    @bind-Date="Album.Deadline" />
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudItem>

        @* Statistics Area *@
        <MudItem xs="12" sm="8">
            <MudPaper Class="d-flex align-center justify-center mud-width-full mud-height-full py-8">
                    <MudChart ChartOptions="@DeadlineBarOptions" ChartType="ChartType.Donut" Width="300px" Height="300px" InputData="@DeadlineData" InputLabels="@DeadlineLabels">
                        <CustomGraphics>
                            @if (daysLeft == 0)
                            {
                                <svg>
                                    <text class="donut-inner-text" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="white" font-family="Helvetica" font-size="2">Deadline reached</text>
                                </svg>
                            }
                            else
                            {
                                <svg>
                                    <text class="donut-inner-text" x="50%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="white" font-family="Helvetica" font-size="2">Days to deadline</text>
                                    <text class="donut-inner-text" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="white" font-family="Helvetica" font-size="5">@daysLeft</text>
                                </svg>
                            }
                        </CustomGraphics>
                    </MudChart>
                    <MudChart ChartOptions="@SelectedImagesBarOptions" ChartType="ChartType.Donut" Width="300px" Height="300px" InputData="@SelectedImagesData" InputLabels="@SelectedImagesLabels">
                        <CustomGraphics>
                            <text class="donut-inner-text" x="50%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="white" font-family="Helvetica" font-size="2">Total</text>
                            <text class="donut-inner-text" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="white" font-family="Helvetica" font-size="5">@SelectedImagesCount / @Album.MaxSelectedImages</text>
                        </CustomGraphics>
                    </MudChart>
                </MudPaper>
        </MudItem>

        @* Photos Area *@ @* TODO: Skal laves cool *@
        <MudItem xs="12">
            <MudGrid Justify="Justify.FlexStart">
                @if (Album?.Images == null || Album.Images.Count == 0)
                {
                    <MudItem xs="12">
                        <MudPaper>
                            <MudText Typo="Typo.h6">No images uploaded yet</MudText>
                        </MudPaper>
                    </MudItem>
                }
                else
                {
                    @foreach (var img in Album.Images)
                    {
                        <MudItem xs="12" sm="12" md="6" lg="6" xl="4" xxl="2" Style="">
                            <MudPaper>
                                <MudImage Class="rounded-lg" Src=@img.PhotoUrl Style="display: block; height: 210px; max-width: auto; margin-left: auto; margin-right: auto;" />
                            </MudPaper>
                        </MudItem>
                    }
                }
            </MudGrid>
        </MudItem>
    </MudGrid>
}

@code {
    public int SelectedImagesCount { get; set; } = 0; // TODO: Get from database / count of approved images

    [Parameter] // Supply the AlbumId from the query string
    public int AlbumId { get; set; }

    [SupplyParameterFromForm] // Supply the Album from the form
    public Album? Album { get; set; }

    // This method is called when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        // Create a new instance of the DbContext
        // using var dbContext = DbFactory.CreateDbContext(); 

        // Get the Album from the database based on the AlbumId or null if it does not exist
        Album ??= await dbContext.Albums
            .Include(Album => Album.Customer) // Include the Customer navigation property
            .Include(Album => Album.Photographer) // Include the Photographer navigation property
            /* .Include(Album => Album.Images) */ // Include the Images navigation property (should probably be lazily loaded later on)
            .FirstOrDefaultAsync(Album => Album.AlbumId == AlbumId);

        // If the Album does not exist, navigate to the notfound page
        if (Album is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        // Set data for deadline barchart

        // Calculate the time differences
        var now = DateTime.Now;
        var deadline = Album.Deadline.Value;

        daysLeft = Math.Max(0, Math.Ceiling((deadline - now).TotalDays));

        // Populate DeadlineData
        DeadlineData = new[] { daysLeft };

        // TODO Get how many images that is selcted for a project

        double maxSelectedImages = Album.MaxSelectedImages;
        // Set data for images bar chart
        SelectedImagesData = new[] {0, maxSelectedImages};

    }    

    #region Album Info

    private async Task UpdateAlbum(EditContext editContext)
    {
        editContext.Validate(); // Validate the form

        // using var dbContext = DbFactory.CreateDbContext();
        dbContext.Attach(Album!).State = EntityState.Modified; // Attach the Album to the DbContext and set the state to modified

        try
        {
            await dbContext.SaveChangesAsync(); // Save the changes to the database
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!AlbumExists(Album!.AlbumId)) // Check if the Album exists
            {
                NavigationManager.NavigateTo("error"); // Navigate to the error page if the Album does not exist"
            } 
            else
            {
                throw;
            }
        }

        //StateHasChanged(); // Refresh the UI
    }

    private bool AlbumExists(int albumId)
    {
        // using var dbContext = DbFactory.CreateDbContext();
        return dbContext.Albums.Any(e => e.AlbumId == albumId); // Check if an Album with the given AlbumId exists
    }
    #endregion

    #region Photos Area
    // MOCK images
    private Dictionary<int, string> SampleImages = new Dictionary<int, string>()
    {
        {1, "https://jule-tøj.dk/wp-content/uploads/2024/11/Jule-Sweaters-Bluse-Rudolfs-Roed.jpg"},
        {2, "https://jule-tøj.dk/wp-content/uploads/2024/11/Jule-Sweaters-Bluse-Cute-Graa.jpg"},
        {3, "https://julesweater-dame.dk/wp-content/uploads/2022/06/Jule-Sweaters-Bluse-Scoodoolf-Moerkegroen-3-4-aar-98-104-Jule-Sweater-Bluse.jpg"},
        {4, "https://minijacobi.dk/cdn/shop/products/9604-AlmaKidsLsTopX-Mas20Green.jpg?v=1606226125&width=533"},
        {5, "https://img.pikbest.com/ai/illus_our/20230422/cc5a7c6b641f962c662171f0c2ea6d3b.jpg!sw800"},
        {6, "https://img.freepik.com/premium-photo/beautiful-outdoor-christmas-scene-illustration-christmas-house-with-snow-winter-landscape-village_932772-773.jpg"}
    };
    #endregion

    #region Delete Project
    private async Task ShowDeleteConfirmation()
    {
        var parameters = new DialogParameters
        {
            { "Message", "Are you sure you want to delete this project?" }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = DialogService.Show<ConfirmDialog>("Confirm Deletion", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteAlbum();
        }
    }

    private async Task DeleteAlbum()
    {
        if (Album != null)
        {
            dbContext.Albums.Remove(Album);
            await dbContext.SaveChangesAsync();
            NavigationManager.NavigateTo("/albums"); // Redirect after deletion
        }
    }
    #endregion

    #region Upload Images
    string loggedInUser = "test-photographer"; // TODO: Get the logged in user
    int maxAllowedSize = 2 * 1024 * 1024; // 2 MB. TODO: Get from settings

    string baseUri = "https://stfotowebappeu001.blob.core.windows.net"; // TODO: Get from settings

    private async Task UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        var containerClient = blobService.GetBlobContainerClient(loggedInUser);

        await containerClient.CreateIfNotExistsAsync(PublicAccessType.Blob);

        foreach (var file in files)
        {
            string fileName = file.Name;
            var result = await containerClient.UploadBlobAsync(fileName, file.OpenReadStream(maxAllowedSize: maxAllowedSize));

            // Encode the filename to make it URI-safe
            string encodedFileName = HttpUtility.UrlEncode(fileName)
            .Replace("+", "%20")  // Replace spaces
            .Replace("(", "%28") // Replace '('
            .Replace(")", "%29"); // Replace ')'
            System.Diagnostics.Debug.WriteLine($"Encoded filename: '{fileName}' to '{encodedFileName}'");

            // Combine the base URI with the encoded filename
            string fileUri = $"{baseUri}/{loggedInUser}/{encodedFileName}";
            System.Diagnostics.Debug.WriteLine($"File URI: '{fileUri}'");

            // Save the image to the database
            Album.Images.Add(new Image { PhotoUrl = fileUri, FileName = fileName });
        }

        // Save the changes to the database
        dbContext.Attach(Album!).State = EntityState.Modified; // Attach the Album to the DbContext and set the state to modified

        try
        {
            await dbContext.SaveChangesAsync(); // Save the changes to the database
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!AlbumExists(Album!.AlbumId)) // Check if the Album exists
            {
                NavigationManager.NavigateTo("error"); // Navigate to the error page if the Album does not exist"
            }
            else
            {
                throw;
            }
        }

        // Refresh the UI
        StateHasChanged();
    }
    #endregion

    #region Options and logic for bar charts
    // Options and logic for Images bar chart
    public double[] SelectedImagesData;
    public string[] SelectedImagesLabels = { "Selected Images", "Unselected Images" };
    public ChartOptions SelectedImagesBarOptions = new ChartOptions() { ChartPalette = new[] { "#1ec8a4", "#ff4181" } };

    // Options and logic for Deadline bar chart
    public double[] DeadlineData;
    public double daysLeft;
    public string[] DeadlineLabels
    {
        get
        {
            if (daysLeft == 0)
            {
                return new[] { "Deadline" };
            }
            else
            {
                return new[] { "Days Left", "Deadline" };
            }
        }
    }
    public ChartOptions DeadlineBarOptions
    {
        get
        {
            if (daysLeft == 0)
            {
                // Modify the ChartOptions when daysLeft is 0
                return new ChartOptions()
                    {
                        ChartPalette = new[] { "#ff4181" }
                    };
            }
            else
            {
                // Default ChartOptions
                return new ChartOptions()
                    {
                        ChartPalette = new[] { "#1ec8a4" }
                    };
            }
        }
    }
    #endregion

    #region Logic for drag and drop

    private const string DefaultDragClass = "absolute";
    private const string DefaultDragStyle = "height: 100vh; width: 100%; left: 0px; top: 0px;";
    private string _dragClass = DefaultDragClass;
    private string _dragStyle = DefaultDragStyle;

    private void SetDragClass()
    {
        _dragClass = $"{DefaultDragClass} border-2 border-dashed mud-border-primary";
        _dragStyle = $"{DefaultDragStyle} z-index: 1400; background-color: black; opacity: 0.5";
    }

    private void ClearDragClass()
    {
        _dragClass = DefaultDragClass;
        _dragStyle = DefaultDragStyle;
    }
    private void HandleDrop()
    {
        // Logic for handling the drop event
    }
    #endregion
}
